# name: Deploy to Production

# on:
#   workflow_run:
#     workflows: ["Build and Publish Docker Images"]
#     branches: [main]
#     types:
#       - completed
#   workflow_dispatch:

# jobs:
#   deploy:
#     name: Deploy to Production Server
#     runs-on: ubuntu-latest
#     if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Create .env file
#         run: |
#           echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > .env
#           echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
#           echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
#           echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
#           echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
#           echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
#           echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
#           echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env
#           echo "HUGGING_FACE_API_KEY=${{ secrets.HUGGING_FACE_API_KEY }}" >> .env
#           echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> .env
#           echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
#           echo "RATE_LIMIT_MAX=${{ secrets.RATE_LIMIT_MAX }}" >> .env
#           echo "RATE_LIMIT_WINDOW_MS=${{ secrets.RATE_LIMIT_WINDOW_MS }}" >> .env
#           echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> .env
#           echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> .env
#           echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
      
#       - name: Setup Nginx config
#         run: |
#           mkdir -p nginx/conf.d
#           cp nginx/conf.d/default.conf nginx/conf.d/default.conf
      
#       - name: Copy files to server
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: ${{ secrets.SSH_PORT }}
#           source: "docker-compose.prod.yml,.env,nginx/conf.d/"
#           target: "/opt/codelinesjs"
#           strip_components: 0
          
#       - name: Deploy to server
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USERNAME }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: ${{ secrets.SSH_PORT }}
#           script: |
#             cd /opt/codelinesjs
            
#             # Zaloguj się do Docker Hub
#             echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
#             # Pobierz najnowsze obrazy
#             docker pull ${{ secrets.DOCKERHUB_USERNAME }}/codelinesjs-client:main
#             docker pull ${{ secrets.DOCKERHUB_USERNAME }}/codelinesjs-server:main
            
#             # Utwórz potrzebne katalogi
#             mkdir -p nginx/ssl nginx/letsencrypt
            
#             # Uruchom docker-compose
#             docker-compose -f docker-compose.prod.yml down
#             docker-compose -f docker-compose.prod.yml up -d
            
#             # Wykonaj inicjalizację danych (jeśli potrzebna)
#             sleep 10
#             docker-compose -f docker-compose.prod.yml exec -T server npm run init-paths || true
            
#             # Wyczyść nieużywane obrazy
#             docker image prune -a -f

#       - name: Send Slack notification
#         uses: 8398a7/action-slack@v3
#         with:
#           status: ${{ job.status }}
#           fields: repo,message,commit,author,action,workflow
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         if: always() 